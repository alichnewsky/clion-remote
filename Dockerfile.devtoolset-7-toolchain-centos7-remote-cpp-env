# CLion remote docker environment (How to build docker container, run and stop it)
#
# Build and run:
#   
#   export PASSWD=$(uuidgen)
#   export IMAGE=clion/centos-cpp-env:${PASSWD}
#   docker build -t ${IMAGE}  \
#                --build-arg PASSWD=${PASSWD} \
#                --build-arg OUTPUT_IMAGE_AND_TAG=${IMAGE} \
#                --build-arg BASE=centos/devtoolset-7-toolchain-centos7  \
#                -f Dockerfile.devtoolset-7-toolchain-centos7-cpp-env .
#   docker run -d --name clion_remote_env --cap-add sys_ptrace -p127.0.0.1:2222:22 ${IMAGE}
#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"
#
# stop and remove:
#
#   docker rm $(stop clion_remote_env)
#
# THIS IS A MAJOR SECURITY RISK
# DO _NOT_ EXPOSE THIS PORT VIA docker run --network=host
# or any tcp forwarding
#
# consider using a pre-existing shared key instead .
#
# ssh credentials (test user):
#   user@password 
#
# let's say that your product came with its own Dockerfile and its own docker image
# for example in a .devcontainer/devcontainer.json for VSCODE
# you'd just have to replace centos:7 as the base local container to clion-ize it
# 

ARG BASE=centos/devtoolset-7-toolchain-centos7
FROM ${BASE}


RUN yum -y update \
 && yum -y install openssh-server \
  make \
  build-essential \
  gdb \
  clang \
  rsync \
  tar \
  python \
  sudo \
 && yum clean all

RUN [[ -f /usr/bin/cmake ]] || yum install -y cmake3

RUN ssh-keygen -A

RUN ( \
    echo 'LogLevel DEBUG2'; \
    echo 'PermitRootLogin yes'; \
    echo 'PasswordAuthentication yes'; \
    echo 'Subsystem sftp /usr/libexec/openssh/sftp-server'; \
  ) > /etc/ssh/sshd_config_test_clion

ARG PASSWD=password
RUN useradd -m user \
  && yes ${PASSWD} | passwd user

# another security risk. ok for dev and very ephemeral containers
# not on host network...
RUN echo "user  ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/clion_remote_user
RUN echo "user uses password ${PASSWD}"

# where devtooset-7 puts _root_
RUN chown -R root:root /opt/app-root
RUN echo  source /opt/app-root/etc/scl_enable | su  user -c "tee -a /home/user/.bashrc"

ARG OUTPUT_IMAGE_AND_TAG=whatever-you-called-me:local
RUN echo ; echo; echo "run with :" && \
    echo "docker run --name clion_remote_env -d --cap-add sys_ptrace -p127.0.0.1:2222:22 ${OUTPUT_IMAGE_AND_TAG}" && \
    echo "ssh-keygen -f \"\${HOME}/.ssh/known_hosts\" -R \"[localhost]\":2222" && \
    echo && \
    echo "stop with :" && \
    echo "docker stop clion_remote_env" && \
    echo && \
    echo "remove container with: " && \
    echo "docker rm clion_remote_env"
    
CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test_clion"]
