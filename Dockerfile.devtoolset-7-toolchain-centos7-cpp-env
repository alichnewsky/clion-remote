# CLion remote docker environment (How to build docker container, run and stop it)
#
# Build and run:
#   docker build -t clion/centos7-cpp-env:0.1 --build-arg BASE=centos/devtoolset-7-toolchain-centos7  -f Dockerfile.devtoolset-7-toolchain-centos7-cpp-env .
#   docker run -d --cap-add sys_ptrace -p127.0.0.1:2222:22 clion/centos7-cpp-env:0.1
#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"
#
# stop:
#   docker stop clion_remote_env
# 
# ssh credentials (test user):
#   user@password 
#
# let's say that your product came with its own Dockerfile and its own docker image
# for example in a .devcontainer/devcontainer.json for VSCODE
# you'd just have to replace centos:7 as the base local container to clion-ize it
# 
ARG BASE=centos/devtoolset-7-toolchain-centos7
FROM ${BASE}


RUN yum -y update \
 && yum -y install openssh-server \
  make \
  build-essential \
  gdb \
  clang \
  rsync \
  tar \
  python \
  sudo \
 && yum clean all

RUN [[ -f /usr/bin/cmake ]] || yum install -y cmake3

RUN ssh-keygen -A

RUN ( \
    echo 'LogLevel DEBUG2'; \
    echo 'PermitRootLogin yes'; \
    echo 'PasswordAuthentication yes'; \
    echo 'Subsystem sftp /usr/libexec/openssh/sftp-server'; \
  ) > /etc/ssh/sshd_config_test_clion

RUN useradd -m user \
  && yes password | passwd user

# make user a sudoer OR rebuild container ?

# where devtooset-7 puts _root_
RUN chown -R root:root /opt/app-root
RUN echo  source /opt/app-root/etc/scl_enable | su  user -c "tee -a /home/user/.bashrc"

RUN echo ; echo; echo "run with :" && \
    echo "docker run --name clion_remote_env -d --cap-add sys_ptrace -p127.0.0.1:2222:22 whatever-you-tagged-me" && \
    echo "ssh-keygen -f \"\${HOME}/.ssh/known_hosts\" -R \"[localhost]\":2222" && \
    echo && \
    echo "stop with :" && \
    echo "docker stop clion_remote_env" && \
    echo && \
    echo "remove container with: " && \
    echo "docker rm clion_remote_env"
    
CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test_clion"]
